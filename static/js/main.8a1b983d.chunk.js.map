{"version":3,"sources":["Cell.js","Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","handleClick","bind","evt","this","flipCellsAroundMe","classes","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","tblBoard","flipCellsAround","makeTable","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAsCeA,G,wDApBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,wDAKPC,GAEVC,KAAKJ,MAAMK,sB,+BAIX,IAAIC,EAAU,QAAUF,KAAKJ,MAAMO,MAAQ,YAAc,IAEzD,OACI,oBAAIC,UAAWF,EAASG,QAASL,KAAKH,kB,GAf3BS,cCcbC,G,wDAQJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACTC,QAAQ,EACRC,MAAO,EAAKC,eAJC,E,0DAYjB,IADA,IAAID,EAAQ,GACJE,EAAG,EAAGA,EAAEZ,KAAKJ,MAAMiB,MAAMD,IAAI,CAEjC,IADA,IAAIE,EAAM,GACFC,EAAE,EAAGA,EAAEf,KAAKJ,MAAMoB,MAAOD,IAC7BD,EAAIG,KAAKC,KAAKC,SAAWnB,KAAKJ,MAAMwB,qBAExCV,EAAMO,KAAKH,GAIf,OAAOJ,I,sCAKOW,GAAQ,IAAD,EACArB,KAAKJ,MAArBoB,EADgB,EAChBA,MAAOH,EADS,EACTA,MACRH,EAAQV,KAAKQ,MAAME,MAFF,EAGRW,EAAMC,MAAM,KAAKC,IAAIC,QAHb,mBAGhBZ,EAHgB,KAGbG,EAHa,KAMrB,SAASU,EAASb,EAAGG,GAGfA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACvCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,IAK5BU,EAASb,EAAGG,GACZU,EAASb,EAAGG,EAAI,GAChBU,EAASb,EAAGG,EAAI,GAChBU,EAASb,EAAI,EAAGG,GAChBU,EAASb,EAAI,EAAGG,GAEhB,IAAIN,EAASC,EAAMgB,OAAM,SAAAZ,GAAG,OAAIA,EAAIY,OAAM,SAAAC,GAAI,OAAKA,QAEnD3B,KAAK4B,SAAS,CAAElB,MAAOA,EAAOD,OAAQA,M,kCAetC,IAFW,IAAD,OACNoB,EAAW,GACNjB,EAAI,EAAGA,EAAIZ,KAAKJ,MAAMiB,MAAOD,IAAK,CAEzC,IADA,IAAIE,EAAM,GAD+B,WAEhCC,GACP,IAAIM,EAAK,UAAMT,EAAN,YAAWG,GACpBD,EAAIG,KACF,cAAC,EAAD,CAEEd,MAAO,EAAKK,MAAME,MAAME,GAAGG,GAC3Bd,kBAAmB,kBAAM,EAAK6B,gBAAgBT,KAFzCA,KAJFN,EAAI,EAAGA,EAAIf,KAAKJ,MAAMoB,MAAOD,IAAM,EAAnCA,GAUTc,EAASZ,KAAK,6BAAaH,GAAJF,IAEzB,OACE,uBAAOR,UAAU,QAAjB,SACE,gCAAQyB,Q,+BAMV,OACE,8BACI7B,KAAKQ,MAAMC,OACb,sBAAKL,UAAU,SAAf,UACE,sBAAMA,UAAU,cAAhB,iBACA,sBAAMA,UAAU,YAAhB,qBAGF,gCACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,cAAf,oBACA,qBAAKA,UAAU,YAAf,oBAEDJ,KAAK+B,qB,GA3GEzB,cAAdC,EAEKyB,aAAe,CAClBnB,MAAO,EACPG,MAAO,EACPI,oBAAqB,KAgHdb,Q,MCzIA0B,MARf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,cAAC,EAAD,OCMS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8a1b983d.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport \"./Cell.css\"\r\n\r\n\r\n/** A single cell on the board.\r\n *\r\n * This has no state --- just two props:\r\n *\r\n * - flipCellsAroundMe: a function rec'd from the board which flips this\r\n *      cell and the cells around of it\r\n *\r\n * - isLit: boolean, is this cell lit?\r\n *\r\n * This handles clicks --- by calling flipCellsAroundMe\r\n *\r\n **/\r\n\r\nclass Cell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(evt) {\r\n    // call up to the board to flip cells around this cell\r\n    this.props.flipCellsAroundMe();\r\n  }\r\n\r\n  render() {\r\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\r\n\r\n    return (\r\n        <td className={classes} onClick={this.handleClick} />\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Cell;","import React, {Component} from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport './Board.css';\r\n\r\n\r\n/** Game board of Lights out.\r\n *\r\n * Properties:\r\n *\r\n * - nrows: number of rows of board\r\n * - ncols: number of cols of board\r\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\r\n *\r\n * State:\r\n *\r\n * - hasWon: boolean, true when board is all off\r\n * - board: array-of-arrays of true/false\r\n *\r\n *    For this board:\r\n *       .  .  .\r\n *       O  O  .     (where . is off, and O is on)\r\n *       .  .  .\r\n *\r\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\r\n *\r\n *  This should render an HTML table of individual <Cell /> components.\r\n *\r\n *  This doesn't handle any clicks --- clicks are on individual cells\r\n *\r\n **/\r\n\r\nclass Board extends Component {\r\n\r\n    static defaultProps = {\r\n        nrows: 5,\r\n        ncols: 5,\r\n        chanceLightStartsOn: 0.25\r\n    };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        hasWon: false,\r\n        board: this.createBoard()\r\n    };\r\n  }\r\n\r\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\r\n\r\n  createBoard() {\r\n    let board = [];\r\n    for(let y =0; y<this.props.nrows;y++){\r\n        let row = [];\r\n        for(let x=0; x<this.props.ncols; x++){\r\n            row.push(Math.random() < this.props.chanceLightStartsOn);\r\n        }\r\n        board.push(row);\r\n    }\r\n\r\n\r\n    return board\r\n  }\r\n\r\n  /** handle changing a cell: update board & determine if winner */\r\n\r\n  flipCellsAround(coord) {\r\n    let {ncols, nrows} = this.props;\r\n    let board = this.state.board;\r\n    let [y, x] = coord.split(\"-\").map(Number);\r\n\r\n\r\n    function flipCell(y, x) {\r\n      // if this coord is actually on board, flip it\r\n\r\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n        board[y][x] = !board[y][x];\r\n      }\r\n\r\n    }\r\n\r\n    flipCell(y, x); //Flip initial cell\r\n    flipCell(y, x - 1); //flip left\r\n    flipCell(y, x + 1); //flip right\r\n    flipCell(y - 1, x); //flip below\r\n    flipCell(y + 1, x); //flip above\r\n\r\n    let hasWon = board.every(row => row.every(cell => !cell));\r\n\r\n    this.setState({ board: board, hasWon: hasWon });\r\n\r\n    // TODO: flip this cell and the cells around it\r\n\r\n    // win when every cell is turned off\r\n    // TODO: determine is the game has been won\r\n\r\n    // this.setState({board, hasWon});\r\n  }\r\n\r\n\r\n  /** Render game board or winning message. */\r\n\r\n  makeTable() {\r\n    let tblBoard = [];\r\n    for (let y = 0; y < this.props.nrows; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < this.props.ncols; x++) {\r\n        let coord = `${y}-${x}`;\r\n        row.push(\r\n          <Cell\r\n            key={coord}\r\n            isLit={this.state.board[y][x]}\r\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\r\n          />\r\n        );\r\n      }\r\n      tblBoard.push(<tr key={y}>{row}</tr>);\r\n    }\r\n    return (\r\n      <table className='Board'>\r\n        <tbody>{tblBoard}</tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  render() {\r\n      return (\r\n        <div>\r\n           {this.state.hasWon ? (\r\n          <div className='winner'>\r\n            <span className='neon-orange'>YOU</span>\r\n            <span className='neon-blue'>WIN!</span>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className='Board-title'>\r\n              <div className='neon-orange'>Lights</div>\r\n              <div className='neon-blue'>Out</div>\r\n            </div>\r\n            {this.makeTable()}\r\n          </div>\r\n        )}\r\n        </div>\r\n          \r\n      )\r\n  }\r\n}\r\n\r\n\r\nexport default Board\r\n","import Board from \"./Board\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}